name: Build and Release APK

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Create empty local.properties
        run: touch local.properties

      - name: Extract version name
        id: extract_version_name
        run: echo "VERSION_NAME=$(./gradlew -q :app:printVersionName)" >> $GITHUB_OUTPUT

      - name: Extract version code
        id: extract_version_code
        run: echo "VERSION_CODE=$(grep 'versionCode ' app/build.gradle | sed -n 's/.*versionCode \([0-9]*\).*/\1/p')" >> $GITHUB_OUTPUT

      - name: Check if MAPS_API_KEY_PLACEHOLDER is set
        run: |
          if [ -n "${{ secrets.MAPS_API_KEY_PLACEHOLDER }}" ]; then
            echo "MAPS_API_KEY_PLACEHOLDER secret is set."
          else
            echo "ERROR: MAPS_API_KEY_PLACEHOLDER secret is not set."
            exit 1
          fi

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release.keystore

      - name: Check Decoded Keystore File
        run: |
          if [ -f "release.keystore" ] && [ -s "release.keystore" ]; then
            echo "Keystore file exists and is not empty."
          else
            echo "ERROR: Keystore file is missing or empty."
            exit 1
          fi

      - name: Build release APK
        run: ./gradlew :app:assembleRelease
        env:
          MAPS_API_KEY_FROM_WORKFLOW: ${{ secrets.MAPS_API_KEY_PLACEHOLDER }}
          KEYSTORE_PATH: ${{ github.workspace }}/release.keystore
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Display generated resources on failure
        if: failure()
        run: cat app/build/generated/res/resValues/release/values/generated.xml || echo "Generated XML not found."

      - name: List APK directory contents
        run: ls -R app/build/outputs/apk || echo "APK directory not found."

      - name: Check APK existence
        run: |
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "APK found at app/build/outputs/apk/release/app-release.apk"
          else
            echo "ERROR: APK not found at app/build/outputs/apk/release/app-release.apk"
            exit 1
          fi

      - name: Create GitHub Release
        id: create_gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'push' && github.ref_type == 'tag' ? github.ref_name : format('{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, github.run_number) }}
          name: ${{ github.event_name == 'push' && github.ref_type == 'tag' ? format('Release {0}', github.ref_name) : format('Release {0} (Run #{1})', steps.extract_version_name.outputs.VERSION_NAME, github.run_number) }}
          body: |
            ## Release Details
            **Version Name:** ${{ steps.extract_version_name.outputs.VERSION_NAME }}
            **Version Code:** ${{ steps.extract_version_code.outputs.VERSION_CODE }}
            **Tag:** ${{ github.event_name == 'push' && github.ref_type == 'tag' ? github.ref_name : format('{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, github.run_number) }}
            **Changelog:**
            - Placeholder for changes
          draft: false
          prerelease: ${{ github.event_name != 'push' || github.ref_type != 'tag' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release APK Asset
        uses: softprops/action-gh-release@v2
        with:
          files: app/build/outputs/apk/release/app-release.apk
          tag_name: ${{ github.event_name == 'push' && github.ref_type == 'tag' ? github.ref_name : format('{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, github.run_number) }}
          token: ${{ secrets.GITHUB_TOKEN }}
