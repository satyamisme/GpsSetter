name: Build and Release APK tag

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
  push:
    branches:
      - '**' # Allow pushes to any branch

permissions:
  contents: write # Allows to create a release and upload assets

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_inputs.branch || github.ref_name }} # Use input branch for workflow_dispatch, else push branch
          fetch-depth: 0 # Fetch all history for accurate versioning

      - name: Cache Gradle dependencies
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Create empty local.properties
        run: touch local.properties # Creates an empty file in the project root

      - name: Extract version name
        id: extract_version_name
        run: |
          VERSION_NAME=$(./gradlew -q :app:printVersionName || echo "error")
          if [ "$VERSION_NAME" = "error" ]; then
            echo "Failed to extract version name"
            exit 1
          fi
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        env:
          MAPS_API_KEY_FROM_WORKFLOW: ${{ secrets.MAPS_API_KEY_PLACEHOLDER }}

      - name: Extract version code
        id: extract_version_code
        run: |
          VERSION_CODE=$(grep 'versionCode ' app/build.gradle | sed -n 's/.*versionCode \([0-9]*\).*/\1/p' || echo "error")
          if [ "$VERSION_CODE" = "error" ]; then
            echo "Failed to extract version code"
            exit 1
          fi
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Get app name and last commit
        id: app_info
        run: |
          APP_NAME=$(grep 'applicationId ' app/build.gradle | sed -n 's/.*applicationId "\(.*\)".*/\1/p' | head -n 1)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Check if MAPS_API_KEY_PLACEHOLDER is set
        run: |
          if [ -n "${{ secrets.MAPS_API_KEY_PLACEHOLDER }}" ]; then
            echo "MAPS_API_KEY_PLACEHOLDER secret is set by GitHub."
          else
            echo "MAPS_API_KEY_PLACEHOLDER secret is NOT set by GitHub. Please ensure it is correctly named in repository settings."
            exit 1
          fi

      - name: Clear cache on build failure
        if: failure()
        run: |
          echo "Build failed, clearing Gradle cache to ensure clean state for next run."
          rm -rf ~/.gradle/caches

      - name: Sign APK
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE }}" | base64 -d > keystore.jks
          ./gradlew :app:assembleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          MAPS_API_KEY_FROM_WORKFLOW: ${{ secrets.MAPS_API_KEY_PLACEHOLDER }}

      - name: Verify APK exists
        run: |
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "Signed APK not found at app/build/outputs/apk/release/app-release.apk"
            exit 1
          fi

      - name: List APK directory contents
        run: |
          echo "Listing app/build/outputs/apk:"
          ls -R app/build/outputs/apk
          echo "Listing app/build/outputs/apk/release:"
          ls -R app/build/outputs/apk/release || echo "Release directory not found or empty."

      - name: Create GitHub Release
        id: create_gh_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version_name.outputs.VERSION_NAME }}-${{ steps.app_info.outputs.COMMIT_HASH }}
          name: ${{ steps.app_info.outputs.APP_NAME }} Release v${{ steps.extract_version_name.outputs.VERSION_NAME }}-${{ steps.app_info.outputs.COMMIT_HASH }}
          body: |
            ## ${{ steps.app_info.outputs.APP_NAME }} Release v${{ steps.extract_version_name.outputs.VERSION_NAME }}-${{ steps.app_info.outputs.COMMIT_HASH }}
            **Build Number:** ${{ steps.extract_version_code.outputs.VERSION_CODE }}
            **Commit:** ${{ steps.app_info.outputs.COMMIT_HASH }}
            **Branch:** ${{ github.event.inputs.branch || github.ref_name }}

            **Changelog:**
            * Add your changelog here
          draft: false
          prerelease: false

      - name: Upload Release APK Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: ${{ steps.app_info.outputs.APP_NAME }}-v${{ steps.extract_version_name.outputs.VERSION_NAME }}-${{ steps.app_info.outputs.COMMIT_HASH }}.apk
          asset_content_type: application/vnd.android.package-archive
