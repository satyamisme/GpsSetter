name: Build and Release Signed APK

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
  push:
    tags:
      - 'v*.*.*' # Automatically trigger on version tags like v1.0.0

permissions:
  contents: write # Required to create a release and upload assets

jobs:
  build_and_release_signed_apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}
          fetch-depth: 0 # Fetch all history for commit hash

      - name: Cache Gradle dependencies
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: '33.0.0'

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Create empty local.properties
        run: touch local.properties

      - name: Extract version name from Gradle
        id: extract_version_name
        run: |
          VERSION_NAME=$(./gradlew -q :app:printVersionName || echo "error")
          if [ "$VERSION_NAME" = "error" ]; then
            echo "Failed to extract version name"
            exit 1
          fi
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        env:
          MAPS_API_KEY_FROM_WORKFLOW: ${{ secrets.MAPS_API_KEY_PLACEHOLDER }}

      - name: Extract version code from Gradle
        id: extract_version_code
        run: |
          VERSION_CODE=$(grep 'versionCode ' app/build.gradle | sed -n 's/.*versionCode \([0-9]*\).*/\1/p' || echo "error")
          if [ "$VERSION_CODE" = "error" ]; then
            echo "Failed to extract version code"
            exit 1
          fi
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Get app name and last commit
        id: app_info
        run: |
          APP_NAME=$(grep 'applicationId ' app/build.gradle | sed -n 's/.*applicationId "\(.*\)".*/\1/p' | head -n 1)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Check if MAPS_API_KEY_PLACEHOLDER is set
        run: |
          if [ -n "${{ secrets.MAPS_API_KEY_PLACEHOLDER }}" ]; then
            echo "MAPS_API_KEY_PLACEHOLDER secret is set by GitHub."
          else
            echo "WARNING: MAPS_API_KEY_PLACEHOLDER secret is NOT set. Maps might not work."
          fi

      - name: Configure signing properties
        run: |
          echo "storeFile=release.keystore" >> gradle.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> gradle.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> gradle.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> gradle.properties

      - name: Decode and validate keystore
        id: decode_keystore
        run: |
          echo "Attempting to decode keystore..."
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "ERROR: KEYSTORE_BASE64 secret is not set. Cannot decode keystore."
            exit 1
          fi
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/release.keystore
          echo "Keystore decoded to ${{ github.workspace }}/release.keystore"
          echo "KEYSTORE_FILE_PATH=${{ github.workspace }}/release.keystore" >> $GITHUB_OUTPUT
          # Validate keystore
          keytool -list -keystore ${{ github.workspace }}/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -storetype PKCS12
          if [ $? -ne 0 ]; then
            echo "ERROR: Keystore validation failed. Check KEYSTORE_BASE64, KEYSTORE_PASSWORD, or KEY_ALIAS."
            exit 1
          fi
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      - name: Check Decoded Keystore File
        run: |
          echo "Checking for decoded keystore at ${{ steps.decode_keystore.outputs.KEYSTORE_FILE_PATH }}"
          ls -l ${{ steps.decode_keystore.outputs.KEYSTORE_FILE_PATH }}
          if [ -f "${{ steps.decode_keystore.outputs.KEYSTORE_FILE_PATH }}" ] && [ -s "${{ steps.decode_keystore.outputs.KEYSTORE_FILE_PATH }}" ]; then
            echo "Keystore file exists and is not empty."
          else
            echo "ERROR: Keystore file does not exist or is empty after decoding!"
            exit 1
          fi

      - name: Clear cache on build failure
        if: failure()
        run: |
          echo "Build failed, clearing Gradle cache to ensure clean state for next run."
          rm -rf ~/.gradle/caches

      - name: Build Signed Release APK
        id: build_apk
        run: ./gradlew clean :app:assembleRelease --stacktrace --info
        env:
          MAPS_API_KEY_FROM_WORKFLOW: ${{ secrets.MAPS_API_KEY_PLACEHOLDER }}

      - name: Debug APK output directory
        if: always()
        run: |
          echo "Listing app/build/outputs/apk:"
          find app/build/outputs/apk -type f || echo "APK directory not found"
          echo "Listing app/build/outputs/apk/release:"
          find app/build/outputs/apk/release -type f || echo "Release directory not found or empty"

      - name: Verify Signed APK presence
        id: verify_apk
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          echo "Verifying APK at $APK_PATH..."
          if [ -f "$APK_PATH" ]; then
            echo "SUCCESS: Signed APK found at $APK_PATH"
            echo "APK_FILE_PATH=$APK_PATH" >> $GITHUB_OUTPUT
            echo "APK_FILE_NAME=${{ steps.app_info.outputs.APP_NAME }}-v${{ steps.extract_version_name.outputs.VERSION_NAME }}-${{ steps.app_info.outputs.COMMIT_HASH }}.apk" >> $GITHUB_OUTPUT
          elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "ERROR: Unsigned APK found at app/build/outputs/apk/release/app-release-unsigned.apk. Signing failed."
            find app/build/outputs/apk -type f
            exit 1
          else
            echo "ERROR: No APK found in app/build/outputs/apk/release/"
            find app/build/outputs/apk -type f
            exit 1
          fi

      - name: Display generated resources on build failure
        if: steps.build_apk.outcome == 'failure'
        run: |
          echo "Build failed. Attempting to display generated string resources..."
          cat app/build/generated/res/resValues/release/values/generated.xml || echo "Generated XML for resValue not found."

      - name: Create GitHub Release
        id: create_gh_release
        if: success()
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, steps.app_info.outputs.COMMIT_HASH) || github.ref_name }}
          name: ${{ steps.app_info.outputs.APP_NAME }} Release ${{ github.event_name == 'workflow_dispatch' && format('v{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, steps.app_info.outputs.COMMIT_HASH) || github.ref_name }}
          body: |
            ## ${{ steps.app_info.outputs.APP_NAME }} Release ${{ github.event_name == 'workflow_dispatch' && format('v{0}-{1}', steps.extract_version_name.outputs.VERSION_NAME, steps.app_info.outputs.COMMIT_HASH) || github.ref_name }}
            **Version Code:** ${{ steps.extract_version_code.outputs.VERSION_CODE }}
            **Commit:** ${{ steps.app_info.outputs.COMMIT_HASH }}
            **Branch:** ${{ github.event.inputs.branch || github.ref_name }}

            *(Auto-generated release notes. Please update with changelog.)*
          draft: false
          prerelease: false

      - name: Upload Release APK Asset to GitHub Release
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ${{ steps.verify_apk.outputs.APK_FILE_PATH }}
          asset_name: ${{ steps.verify_apk.outputs.APK_FILE_NAME }}
          asset_content_type: application/vnd.android.package-archive